/* -------------------------------------------------------------------------- */
/*                      1.  D√©clarer les valeurs globales                     */
/* -------------------------------------------------------------------------- */

// Les emojis pour donner un feedback visuel (parfait, correct, incorrect, etc.)
const emojisFeedback = ["‚úîÔ∏è", "‚ú®", "üëÄ", "üò≠", "üëé"];

// Les lettres des bonnes r√©ponses (facultatif, utile pour les indices)
const reponsesAttendues = ["c", "a", "b", "a", "c"];

// Les bonnes r√©ponses textuelles pour chaque question
const bonnesReponses = [
  "Napol√©on Bonaparte", // Bonne r√©ponse pour la question 1
  "4 juillet 1776",     // Bonne r√©ponse pour la question 2
  "476 ap. J.-C.",      // Bonne r√©ponse pour la question 3
  "Ljubljana",          // Bonne r√©ponse pour la question 4
  "4,9 Millions"        // Bonne r√©ponse pour la question 5
];

// R√©cup√©rer toutes les questions dans le DOM
const listeQuestions = document.querySelectorAll(".question");

// R√©cup√©rer les √©l√©ments sp√©cifiques du DOM n√©cessaires
const messageResultat = document.querySelector("p"); // Paragraphe pour afficher le r√©sultat final
const boutonValider = document.querySelector(".btn-validate"); // Bouton pour valider les r√©ponses
const boutonReinitialiser = document.querySelector(".btn-reset"); // Bouton pour r√©initialiser le quiz

/* -------------------------------------------------------------------------- */
/*                        2.    D√©clarer les fonctions                        */
/* -------------------------------------------------------------------------- */

/**
 * Fonction principale pour valider les r√©ponses des utilisateurs
 * - V√©rifie les r√©ponses s√©lectionn√©es
 * - Compare avec les bonnes r√©ponses
 * - Applique des styles en fonction des r√©sultats
 * - Affiche les bonnes r√©ponses en cas d'erreur
 */
function validerQuiz() {
  let scoreTotal = 0; // Initialise le score total √† 0

  // Parcourt chaque question
  listeQuestions.forEach((question, index) => {
    // Trouver la r√©ponse s√©lectionn√©e pour cette question
    const reponseSelectionnee = question.querySelector("input:checked");

    // Si une r√©ponse est s√©lectionn√©e
    if (reponseSelectionnee) {
      // Comparer la r√©ponse s√©lectionn√©e avec la bonne r√©ponse
      if (reponseSelectionnee.value === bonnesReponses[index]) {
        scoreTotal++; // Bonne r√©ponse : incr√©menter le score
        question.classList.add("bg-green-200"); // Appliquer une couleur verte pour signaler le succ√®s
      } else {
        question.classList.add("bg-red-200"); // Appliquer une couleur rouge pour signaler une erreur
        afficherBonneReponse(question, bonnesReponses[index]); // Afficher la bonne r√©ponse
      }
    } else {
      // Si aucune r√©ponse n'est s√©lectionn√©e
      question.classList.add("bg-yellow-200"); // Appliquer une couleur jaune pour signaler une absence de r√©ponse
      afficherBonneReponse(question, bonnesReponses[index]); // Afficher la bonne r√©ponse
    }
  });

  // Afficher le message final avec le score total
  afficherResultat(scoreTotal);
}

/**
 * Affiche la bonne r√©ponse sous la question correspondante
 * @param {HTMLElement} question - La question concern√©e
 * @param {string} bonneReponse - La bonne r√©ponse √† afficher
 */

function afficherBonneReponse(question, bonneReponse) {
  const elementBonneReponse = document.createElement("p"); // Cr√©e un √©l√©ment <p> pour afficher la bonne r√©ponse
  elementBonneReponse.textContent = `Bonne r√©ponse : ${bonneReponse}`; // Ajoute le texte de la bonne r√©ponse
  elementBonneReponse.classList.add("text-blue-500", "mt-2"); // Applique des styles avec Tailwind CSS
  question.appendChild(elementBonneReponse); // Ajoute cet √©l√©ment au conteneur de la question
}

/**
 * Affiche un message final dans le paragraphe pr√©vu pour le r√©sultat
 * @param {number} score - Le score total obtenu par l'utilisateur
 */

function afficherResultat(score) {
  if (score === listeQuestions.length) {
    // Score parfait
    messageResultat.textContent = `üéâ F√©licitations ! Score parfait : ${score}/${listeQuestions.length} ${emojisFeedback[0]}`;
  } else if (score > listeQuestions.length / 2) {
    // Score moyen ou sup√©rieur
    messageResultat.textContent = `üëå Bien jou√© ! Votre score : ${score}/${listeQuestions.length} ${emojisFeedback[1]}`;
  } else {
    // Score faible
    messageResultat.textContent = `üòî Essayez encore. Votre score : ${score}/${listeQuestions.length} ${emojisFeedback[4]}`;
  }
}

/**
 * R√©initialise le quiz pour permettre une nouvelle tentative
 * - Supprime les couleurs et les bonnes r√©ponses affich√©es
 * - R√©initialise les r√©ponses s√©lectionn√©es et le message final
 */

function reinitialiserQuiz() {
  // R√©initialiser chaque question
  listeQuestions.forEach((question) => {
    question.classList.remove("bg-green-200", "bg-red-200", "bg-yellow-200"); // Retirer toutes les couleurs
    const reponseSelectionnee = question.querySelector("input:checked"); // Trouver la r√©ponse s√©lectionn√©e
    if (reponseSelectionnee) {
      reponseSelectionnee.checked = false; // D√©coche la r√©ponse
    }

    // Supprime les bonnes r√©ponses affich√©es sous la question
    const bonneReponseAffichee = question.querySelector("p.text-blue-500");
    if (bonneReponseAffichee) {
      bonneReponseAffichee.remove();
    }
  });

  // R√©initialise le message de r√©sultat
  messageResultat.textContent = `Cliquez sur Valider pour voir les r√©sultats.`;
}

/* -------------------------------------------------------------------------- */
/*                           Gestion des √©v√©nements                           */
/* -------------------------------------------------------------------------- */

// Associe le bouton "Valider" √† la fonction validerQuiz
boutonValider.addEventListener("click", validerQuiz);

// Associe le bouton "Recommencer" √† la fonction reinitialiserQuiz
boutonReinitialiser.addEventListener("click", reinitialiserQuiz);
